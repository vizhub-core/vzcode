import { useEffect, useState } from 'react';
import { randomId } from '../../randomId';
import { ShareDBDoc, VZCodeContent } from '../../types';
import { useSubmitOperation } from '../useSubmitOperation';

// Set up the connection to ShareDB.
export const useShareDB = ({
  connection,
}: {
  connection: any;
}) => {
  // The ShareDB document.
  const [shareDBDoc, setShareDBDoc] = useState<ShareDBDoc<VZCodeContent> | null>(null);

  // Local ShareDB presence, for broadcasting our cursor position
  // so other clients can see it.
  // See https://share.github.io/sharedb/api/local-presence
  const [localPresence, setLocalPresence] = useState(null);

  // The document-level presence object, which emits
  // changes in remote presence.
  const [docPresence, setDocPresence] = useState(null);

  // The `doc.data` part of the ShareDB document,
  // updated on each change to decouple rendering from ShareDB.
  // Starts out as `null` until the document is loaded.
  const [content, setContent] = useState<VZCodeContent | null>(null);

  const [connected, setConnected] = useState<boolean>(false);
  const [isSaving, setIsSaving] = useState<boolean>(false);
  const [isSaved, setIsSaved] = useState<boolean>(false);

  useEffect(() => {
    // Listen for connection state changes
    connection.on('connected', () => setConnected(true)); // Simplified
    connection.on('disconnected', () => setConnected(false)); // Simplified

    // Since there is only ever a single document,
    // these things are pretty arbitrary.
    //  * `collection` - the ShareDB collection to use
    //  * `id` - the id of the ShareDB document to use
    const collection = 'documents';
    const id = '1';

    // Initialize the ShareDB document.
    const doc = connection.get(collection, id); // Renamed to `doc` for brevity

    // Subscribe to the document to get updates.
    // This callback gets called once only.
    doc.subscribe(() => {
      // Expose ShareDB doc to downstream logic.
      setShareDBDoc(doc);

      // Set initial data.
      setContent(doc.data);

      // Listen for all changes and update `data`.
      // This decouples rendering logic from ShareDB.
      // This callback gets called on each change.
      doc.on('op', () => {
        // Start saving process when thereâ€™s an operation.
        setIsSaving(true);
        setIsSaved(false);

        setContent(doc.data);

        // Simulate a saving process and switch status to "saved"
        const timeoutId = setTimeout(() => {
          setIsSaving(false);
          setIsSaved(true);
        }, 1000); // Adjust the timeout to reflect saving duration

        // Cleanup to avoid memory leaks
        return () => clearTimeout(timeoutId); // Moved cleanup inline
      });

      // Set up presence.
      // See https://github.com/share/sharedb/blob/master/examples/rich-text-presence/client.js#L53
      const presence = connection.getDocPresence(collection, id); // Renamed for clarity

      // Subscribe to receive remote presence updates.
      presence.subscribe(function (error) {
        if (error) throw error;
      });

      // Set up our local presence for broadcasting this client's presence.
      const generateTimestampedId = () => `${Date.now().toString(36)}-${randomId()}`; // Simplified

      setLocalPresence(presence.create(generateTimestampedId())); // Simplified presence setup

      // Store docPresence so child components can listen for changes.
      setDocPresence(presence);
    });

    // TODO unsubscribe from presence
    // TODO unsubscribe from doc
    return () => {
      // doc.destroy(); // Unsubscribe when fully implemented
      // presence.destroy();
    };
  }, [connection]); // Added `connection` as dependency

  // A convenience function for mutating the ShareDB document
  // based submitting OT ops generated by diffing the JSON.
  const submitOperation = useSubmitOperation<VZCodeContent>(shareDBDoc);

  return {
    shareDBDoc,
    content,
    localPresence,
    docPresence,
    submitOperation,
    connected,
    isSaving,
    isSaved,
  };
};
